env:
  # We aim to always test with the latest stable Rust toolchain, however we pin to a specific
  # version like 1.70. Note that we only specify MAJOR.MINOR and not PATCH so that bugfixes still
  # come automatically. If the version specified here is no longer the latest stable version,
  # then please feel free to submit a PR that adjusts it along with the potential clippy fixes.
  RUST_STABLE_VER: "1.76" # In quotes because otherwise (e.g.) 1.70 would be interpreted as 1.7


# Rationale
#
# We don't run clippy with --all-targets because then even --lib and --bins are compiled with
# dev dependencies enabled, which does not match how they would be compiled by users.
# A dev dependency might enable a feature that we need for a regular dependency,
# and checking with --all-targets would not find our feature requirements lacking.
# This problem still applies to cargo resolver version 2.
# Thus we split all the targets into two steps, one with --lib --bins
# and another with --tests --benches --examples.
# Also, we can't give --lib --bins explicitly because then cargo will error on binary-only packages.
# Luckily the default behavior of cargo with no explicit targets is the same but without the error.
#
# We use cargo-hack for a similar reason. Cargo's --workspace will do feature unification across
# the whole workspace. While cargo-hack will instead check each workspace package separately.
#
# Using cargo-hack also allows us to more easily test the feature matrix of our packages.
# We use --each-feature & --optional-deps which will run a separate check for every feature.

name: CI

on:
  pull_request:
  merge_group:

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    name: cargo fmt
    steps:
      - uses: actions/checkout@v4

      - name: install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_STABLE_VER }}
          components: rustfmt

      - name: cargo fmt
        run: cargo fmt --all --check

      - name: install ripgrep
        run: |
          sudo apt update
          sudo apt install ripgrep

      - name: check copyright headers
        run: bash .github/copyright.sh

  test-stable:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # We use macos-14 as that is an arm runner. These have the virtgpu support we need
        os: [windows-latest, macos-14, ubuntu-latest]
        include:
          - os: ubuntu-latest
            gpu: 'yes'
          - os: macos-14
            gpu: 'yes'
          - os: windows-latest
            # TODO: The windows runners theoretically have CPU fallback for GPUs, but
            # this failed in initial testing
            gpu: 'no'
    name: cargo clippy + test
    steps:
      - uses: actions/checkout@v4

      - name: restore cache
        uses: Swatinem/rust-cache@v2

      - name: install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_STABLE_VER }}
          components: clippy

      - name: install cargo-hack
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack

      - name: install native dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev

      # Adapted from https://github.com/bevyengine/bevy/blob/b446374392adc70aceb92621b080d1a6cf7a7392/.github/workflows/validation-jobs.yml#L74-L79
      - name: install xvfb, llvmpipe and lavapipe
        if: matrix.os == 'ubuntu-latest'
        # https://launchpad.net/~kisak/+archive/ubuntu/turtle
        run: |
          sudo apt-get update -y -qq
          sudo add-apt-repository ppa:kisak/turtle -y
          sudo apt-get update
          sudo apt install -y xvfb libegl1-mesa libgl1-mesa-dri libxcb-xfixes0-dev mesa-vulkan-drivers

      - name: cargo clippy
        run: cargo hack clippy --workspace --each-feature --optional-deps -- -D warnings
  
      - name: cargo clippy (auxiliary)
        run: cargo hack clippy --workspace --each-feature --optional-deps --tests --benches --examples -- -D warnings

      - name: cargo test
        run: cargo test --workspace --all-features
        env:
          VELLO_CI_GPU_SUPPORT: ${{ matrix.gpu }}

  clippy-stable-wasm:
    runs-on: ubuntu-latest
    name: cargo clippy + test (wasm32)
    steps:
      - uses: actions/checkout@v4

      - name: restore cache
        uses: Swatinem/rust-cache@v2

      - name: install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_STABLE_VER }}
          targets: wasm32-unknown-unknown
          components: clippy

      - name: install cargo-hack
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack
          
      - name: cargo clippy
        run: cargo hack clippy --workspace --target wasm32-unknown-unknown --each-feature --optional-deps -- -D warnings
  
      - name: cargo clippy (auxiliary)
        run: cargo hack clippy --workspace --target wasm32-unknown-unknown --each-feature --optional-deps --tests --benches --examples -- -D warnings

      # TODO: Find a way to make tests work. Until then the tests are merely compiled.
      - name: cargo test compile
        run: cargo test --workspace --target wasm32-unknown-unknown --all-features --no-run

  android-stable-check:
    runs-on: ubuntu-latest
    name: cargo check (aarch64-android)
    steps:
      - uses: actions/checkout@v4

      - name: restore cache
        uses: Swatinem/rust-cache@v2

      - name: install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_STABLE_VER }}
          targets: aarch64-linux-android

      - name: install cargo apk
        run: cargo install cargo-apk

      - name: cargo apk check (android)
        run: cargo apk check -p with_winit --lib
        env:
          # This is a bit of a hack, but cargo apk doesn't seem to allow customising this
          RUSTFLAGS: '-D warnings'

  docs:
    name: cargo doc
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v4

      - name: restore cache
        uses: Swatinem/rust-cache@v2

      - name: install nightly toolchain
        uses: dtolnay/rust-toolchain@nightly

      # We test documentation using nightly to match docs.rs. This prevents potential breakages
      - name: cargo doc
        run: cargo doc --workspace --all-features --no-deps --document-private-items -Zunstable-options -Zrustdoc-scrape-examples
