// Copyright 2025 the Vello Authors
// SPDX-License-Identifier: Apache-2.0 OR MIT

//! Build step for `vello_sparse_tests`.
//!
//! This build step exists primarily for the wasm32 target testing the browser exclusive "webgl"
//! feature which cannot read snapshot images from the file system. Instead, the reference images
//! are inlined into the binary.
fn main() {
    println!("cargo:rerun-if-changed=snapshots");

    // Target architecture for compilation must be queried via environment variables.
    // Exit early if not building for `wasm32`.
    if std::env::var("CARGO_CFG_TARGET_ARCH").as_deref() != Ok("wasm32") {
        return;
    }

    use quote::quote;
    use std::fs;
    use std::path::Path;

    let out_dir = std::env::var("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("reference_images_wasm.rs");

    let snapshot_dir = Path::new("snapshots");
    let mut match_arms = Vec::new();

    if snapshot_dir.exists() {
        for entry in fs::read_dir(snapshot_dir).unwrap() {
            let entry = entry.unwrap();
            let path = entry.path();
            if path.extension().and_then(|s| s.to_str()) == Some("png") {
                let name = path.file_stem().unwrap().to_str().unwrap();
                let name_str = name.to_string();
                let path_str = format!("/snapshots/{}.png", name);

                match_arms.push(quote! {
                    #name_str => Some(include_bytes!(concat!(env!("CARGO_MANIFEST_DIR"), #path_str))),
                });
            }
        }
    }

    let generated = quote! {
        /// Generated by build.rs: Inlined reference images for WASM tests.
        pub(crate) mod reference_images_wasm {
            pub(crate) fn get_reference_image(name: &str) -> Option<&'static [u8]> {
                match name {
                    #(#match_arms)*
                    _ => None,
                }
            }
        }
    };

    fs::write(&dest_path, generated.to_string()).unwrap();
}
